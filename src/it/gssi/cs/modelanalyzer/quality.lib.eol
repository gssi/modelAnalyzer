import "metricProviders.eol";

operation qualitydef!Operation getOp(artifact : ecosystem!Artifact, aqualityeval:evaluatedecosystem!QualityEval): Real{

var listresult = new Sequence<Real>();
var calculatedOperation = new CalculatedOperation;
	for(metric in self.metrics){
	var calculatedMetric = new CalculatedMetric;
		calculatedMetric.metric = metric;
		
		var result = artifact.call(metric.metricProvider,Sequence{});
		
		calculatedMetric.actualizedvalue = result.asReal();
		listresult.add(result);
		calculatedOperation.calculatedMetrics.add(calculatedMetric);
	}
	calculatedOperation.calculatedBy = self;
	aqualityeval.calculatedBy = calculatedOperation;
	
if(self.withoperation.name=='GET'){
	
	return listresult.first;
	
}else if(self.withoperation.name=='SUM'){
	
	return listresult.sum();
	
}else if(self.withoperation.name=='SUB'){
	var result =listresult.first;
	for (e in listresult.excluding(result.first)) { 
		result= result-e;
	} 
	return result;
}else if(self.withoperation.name=='PROD'){
	
	return listresult.product();
}else if(self.withoperation.name=='MIN'){
	
	return listresult.min();
}else if(self.withoperation.name=='MAX'){
	
	return listresult.max();
	
}else if(self.withoperation.name=='DIV'){
		
	if(listresult.size()==2){
	var first: Real  =listresult.first().asReal();
	var second:  Real =listresult.second().asReal();
		return	(first/second);
	}else{
		return 0.0;
	}
}else if(self.withoperation.name=='AVG'){
	return (listresult.sum()/listresult.size()).asReal();	
}
}

operation ecosystem!Artifact getRealArtifact(){
	var repository = System.context.modelRepository.models.excluding(ecosystem).excluding(evaluatedecosystem).excluding(qualitydef);
	return repository.selectOne(a|a.name=self.name);
}

operation evaluatedecosystem!QualityEcosystemDef evaluate(qualityM:qualitydef!QualityModel ,ecosys: ecosystem!MDEEcosystem ){
self.ecosystemModel = ecosys;
self.qualityModel = qualityM;

for (a in ecosys.artifacts.select(a|not a.virtual)) { 
	
	var qualityattrs = qualityM.qualityattrs.select(qa|emfTool.ecoreUtil.equals(qa.subject,a.eClass));	
	
for (qa in qualityattrs) { 
	var aqualityeval = new evaluatedecosystem!QualityEval ();
	var subject : ecosystem!Artifact()= a;
	aqualityeval.subject  = subject;
	var result =qa.calculatedBy.getOp(a, aqualityeval).asReal();
	aqualityeval.qa = qa;
	aqualityeval.actualizedvalue = result;
	("Evaluating: "+a.name+"-->"+qa.name+": "+result).println();
	evaluatedeecosys.evaluations.add(aqualityeval);
}
}
}

operation Any call(op : String, par: Sequence) : Real {
if(System.context.module.
		operations.exists(o|o.name = op  and ("ecosystem"+"!"+self.eClass.name)=o.getContextType(System.context).name)){
		return System.context.module.
		operations.selectOne(o|o.name = op  and ("ecosystem"+"!"+self.eClass.name)=o.getContextType(System.context).name)
		.execute(self,  par, System.context);
		}else{
			("Undefined metric provider for operation: "+op).println();
		return 0;
		}
}
