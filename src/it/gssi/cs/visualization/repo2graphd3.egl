<style>

.link {
  fill: none;
  stroke: #666;
  stroke-width: 1.5px;
}

.node circle {
  fill: black;
  stroke: #fff;
  stroke-width: 1.5px;
}
circle.virtual{

fill:#ccc;
}

path.link.dependency {
  stroke: red;
}

path.link.distance {
  stroke: violet;
  
}

text {
  font: 10px sans-serif;
  pointer-events: none;
}

 div.tooltip {
                position: absolute;
                text-align: center;
                width: 500px;
                height: 15px;
                padding: 8px;
                font: 10px sans-serif;
                background: lightgray;
                border: solid 1px #aaa;
                border-radius: 8px;
                pointer-events: none;
			
            }

</style>
<body>

<script src="https://d3js.org/d3.v3.min.js"></script>
<script>


var links = [
[%for (edge in edges) { 
if(edge.src.isDefined() and edge.trg.isDefined()){
%]
  {source: "[%=edge.src.name%]", target: "[%=edge.trg.name%]", type: "unidirectional", relationtype: "[%=edge.eClass.name%]", value: "[%=(edge.eClass.name='Distance')?edge.value:''%]"},
  [%
 	}}
  %]
];
var width = 560,
    height = 600;
    
var nodes = {
[%for (node in nodes) { %]
	"[%=node.name%]" : {"name":"[%=node.name%]","info":"[%=node.name%]","virtual":"[%=(node.virtual)?"virtual":"concrete"%]"},
[%}%]

 };

links.forEach(function(link) {
    link.source = nodes[link.source] || 
        (nodes[link.source] = {name: link.source});
    link.target = nodes[link.target] || 
        (nodes[link.target] = {name: link.target});
    link.value = +link.value;
});



var force = d3.layout.force()
    .nodes(d3.values(nodes))
    .links(links)
    .size([width, height])
    .linkDistance(60)
    .charge(-300)
    .on("tick", tick)
    .start();

var svg = d3.select("body").append("svg")
    .attr("width", width)
    .attr("height", height);

// build the arrow.
svg.append("svg:defs").selectAll("marker")
    .data(["end"])      // Different link/path types can be defined here
  .enter().append("svg:marker")    // This section adds in the arrows
    .attr("id", String)
    .attr("viewBox", "0 -5 10 10")
    .attr("refX", 15)
    .attr("refY", -1.5)
    .attr("markerWidth", 6)
    .attr("markerHeight", 6)
    .attr("orient", "auto")
  .append("svg:path")
    .attr("d", "M0,-5L10,0L0,5");

// add the links and the arrows
var path = svg.append("svg:g").selectAll("path")
    .data(force.links())
  .enter().append("svg:path")
    .attr("class", function(d) { return "link " + d.relationtype; })
    //.attr("class", "link")
    
  .style("stroke-dasharray", ("3, 3"))
 .attr("marker-end", link => link.type === "unidirectional" ? "url(#end)" : 0)
 ;
 

// define the nodes
var node = svg.selectAll(".node")
    .data(force.nodes())
  .enter().append("g")
    .attr("class", "node")
    .call(force.drag);
node.on("mouseover", mouseover)
	.on("mouseout", mouseout);
// add the nodes
node.append("circle")
 .attr("class", function(d) { return  d.virtual; })
    .attr("r", 5)
 ;

// add the text 
node.append("text")
    .attr("x", 12)
    .attr("dy", ".35em")
    .text(function(d) { return d.name; })
    ;

    
// label on edges

// add the curvy lines
function tick() {
    path.attr("d", function(d) {
        var dx = d.target.x - d.source.x,
            dy = d.target.y - d.source.y,
            dr = Math.sqrt(dx * dx + dy * dy);
        return "M" + 
            d.source.x + "," + 
            d.source.y + "A" + 
            dr + "," + dr + " 0 0,1 " + 
            d.target.x + "," + 
            d.target.y;
    });

    node
        .attr("transform", function(d) { 
  	    return "translate(" + d.x + "," + d.y + ")"; });
}

	var div = d3.select("body").append("div")
            .attr("class", "tooltip")
            .style("opacity", 1e-6);
	
function mouseover(d) {
	
	d3.select(this).select("circle").transition()
      .duration(750)
      .attr("r", 16);
	
	 div.transition()
                .duration(300)
                .style("opacity", 1);
	
   div.text(d.info)
                .style("left", (d3.event.pageX ) + "px")
                .style("top", (d3.event.pageY + 100) + "px");
	
}
function mouseout(d) {
  d3.select(this).select("circle").transition()
      .duration(750)
      .attr("r", 8);
	
	div.transition()
                .duration(300)
                .style("opacity", 1e-6);
	
}

</script>
</body>
</html>