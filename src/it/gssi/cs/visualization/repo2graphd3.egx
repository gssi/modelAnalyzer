rule Repo2Graphviz
    transform g : QualityEcosystem::QualityEcosystemDef {

    template : "repo2graphd3.egl"
    

    parameters : Map{
        "path" = Sequence{"Repository"},
        "icon" = "diagram-ffffff",
        "format" = "html",
        "layers" = Sequence {
            Map {"id"="relation", "title"="relations", "active"=true}
           
        },
        "nodes" = g.ecosystemModel.artifacts,
        "edges" =g.ecosystemModel.relations
    }
}

rule Metamodel
 
	transform n : QualityEcosystem::QualityEval{

	template : "repo2graphd3.egl"

	parameters : Map{
		"path" = Sequence{"Repository", n.subject.name},
		"icon" = "diagram-c0c0c0",
		"format" = "html",
		"layers" = Sequence {
			
			
		},
		"nodes" = n.subject.isConnected(),
		"edges" = n.def.ecosystemModel.relations.select(e|e.src==n.subject or e.trg==n.subject)
	}
	
}

rule Model
 
	transform n : MDEEcosystem::Model{

	template : "repo2graphd3.egl"

	parameters : Map{
		"path" = Sequence{"Repository", n.subject.name},
		"icon" = "diagram-c0c0c0",
		"format" = "html",
		"layers" = Sequence {
			
			
		},
		"nodes" = n.subject.isConnected(),
		"edges" = MDEEcosystem::Relation.all.select(e|e.src==n or e.trg==n)
	}
	
}

operation MDEEcosystem::Artifact isConnected(){
var seq=self.asSequence();
return seq.includingAll(MDEEcosystem::Artifact.all.select(m| MDEEcosystem::Relation.all.forAll(e|(e.src==m or e.trg==m) or (e.src==self) )));
}

