import "helper.eol";
pre{
var emfTool = new Native("org.eclipse.epsilon.emc.emf.tools.EmfTool");
}

rule Repo2Graphviz
    transform qe : QualityEcosystem::QualityEcosystemDef {

    template : "repo2graphd3.egl"
    

    parameters : Map{
        "path" = Sequence{"Views", "Graph"},
        "icon" = "diagram-ffffff",
        "format" = "html",
        "layers" = qe.getMapTemplates(),
        "nodes" = qe.ecosystemModel.artifacts,
        "evals" = qe.evaluations,
        "edges" =qe.ecosystemModel.relations
    }
}

rule Repo2Barchart
    transform qe : QualityEcosystem::QualityEcosystemDef {

    template : "repo2barchart.egl"
    

    parameters : Map{
        "path" = Sequence{"Views","Barchart"},
        "icon" = "barchart",
        "format" = "html",
        "layers" = qe.getMapTemplates(),
        "nodes" = qe.ecosystemModel.artifacts,
        "evals" = qe.evaluations,
        "edges" =qe.ecosystemModel.relations
    }
}

rule SingleArtifact
 
	transform qeval : QualityEcosystem::QualityEval{

	template : "selection2graphd3.egl"

	parameters : Map{
		"path" = Sequence{"Views","Repository",qeval.subject.internalPath(), qeval.subject.name},
		"icon" = "diagram-c0c0c0",
		"format" = "html",
		"layers" = Sequence {
			
			
		},
		"subject" = qeval.subject,
		"layers" = qeval.def.getMapTemplates(),
		"MAX_QUALITY_ATT" = qeval.def.getMaxValues(qeval.subject.eClass.name),
        "nodes" =  qeval.getConnected(),
        "evals" =  qeval.def.evaluations,
        "edges" = qeval.def.ecosystemModel.relations.select(e|e.src==qeval.subject or e.trg==qeval.subject)
        
		
	}
	
}



operation QualityEval getConnected(): Set(Artifact){
var ecosystem = self.def.ecosystemModel;
return ecosystem.artifacts.select(a|ecosystem.relations.select(rel| emfTool.EcoreUtil.equals(rel.src,a) or emfTool.EcoreUtil.equals(rel.trg,a)).select(r|emfTool.EcoreUtil.equals(r.src,self.subject) or emfTool.EcoreUtil.equals(r.trg,self.subject)).size()>0);
}

