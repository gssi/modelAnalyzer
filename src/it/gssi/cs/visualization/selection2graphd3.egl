[%var emfTool = new Native("org.eclipse.epsilon.emc.emf.tools.EmfTool");%]

<head>
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js"></script>
		 
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">

<!--<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap-theme.min.css" integrity="sha384-rHyoN1iRsVXV4nD0JutlnGaslCJuC7uwjduW9SVrLvRYooPp2bWYgmgJQIXwl/Sp" crossorigin="anonymous">-->

<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js" integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" crossorigin="anonymous"></script>
</head>
<style>
:root {
  --blue: #60A5FA;
  --green: #6EE7B7;
  --red: #EF4444;
  --dark: #4B5563;
  --dark-2: #1F2937;
}
body, html{
	height: 100%;
	width: 100%;
}
*{
	outline: none;
	margin: 0;
	padding: 0;
	text-shadow: none !important;
	-webkit-font-smoothing: antialiased;
 	-moz-osx-font-smoothing: grayscale;
}
.box-shadow{
    box-shadow: 0 0 5px rgb(0 0 0 / 30%);
    border: none !important;
}
.svg-content-responsive{
	width: 100%;
	height: 100%;
	position: absolute;
	top: 0;
	left: 0;
}
.link {
  fill: none;
  stroke: #666;
  stroke-width: 1.5px;
  stroke-dasharray: 10 10;
}
.link.link-dashed{
	stroke-dasharray: 3 3;
}
.all-dashed .link{
	stroke-dasharray: 3 3;
}
.node{
	
}
.node circle {
  /*fill: black;*/
  fill: #00000059;
  stroke: #fff;
  stroke-width: 1.5px;
}

.node.Metamodel circle {
  /*fill: black;
  fill: #00000029;*/
  fill: var(--red);
  stroke: #fff;
  stroke-width: 1.5px;
}

.node.Model circle{
	/*fill: blue;*/
	fill: var(--blue);
	stroke: #fff;
}

circle.virtual{
	fill: #ccc;
}

path.link.dependency {
  	stroke: red;
}

path.link.distance {
  	stroke: violet;
  
}
text {
  font: 10px sans-serif;
  pointer-events: none;
}
.link-label {
    font-size: 12px;
}
.node-label{
	font-size: 12px;
	/*text-anchor: middle;*/
}
.node-label-bg{
	fill: #efefef;
	/*stroke: #ccc;
    stroke-width: 1;*/
}         
.jumbotron {
	background-color:#FFFFFF;
	padding: 0 !important;
    margin: 0 !important;
}
.custom-navbar{
	box-shadow: none;
    background: #fff;
    border-radius: 10px;
    margin-top: 15px;
}
.custom-navbar.dark-theme{
	background: var(--dark)
}
.custom-navbar .navbar-collapse{
	border: none;
}
.custom-navbar.dark-theme.navbar-default .navbar-brand{
	color: #fff;
}
.custom-navbar .dropdown .dropdown-toggle{
    padding: 10px 15px;
    border-radius: 5px;
    box-shadow: none;
    background: none;
    transition: 0.5s;
    margin: 5px 5px 0;
}
.custom-navbar .navbar-nav > li > a{
    font-size: 16px;
}
.custom-navbar.dark-theme .navbar-nav > li > a{
	color: #fff;
}
.custom-navbar .dropdown .dropdown-toggle:hover, .custom-navbar .dropdown.open .dropdown-toggle{
	background: #ededed;
}
.custom-navbar.dark-theme .dropdown .dropdown-toggle:hover, .custom-navbar.dark-theme .dropdown.open .dropdown-toggle{
	background: var(--dark-2);
	color: #fff;
}
.custom-navbar .dropdown-menu{
	background: var(--dark)
}
.custom-navbar .dropdown-menu>li{
	padding: 5px 10px;
	font-size: 16px;
}
.custom-navbar .dropdown-menu>li>a{
    padding: 10px 15px;
    border-radius: 5px;
    transition: 0.5s;
}
.custom-navbar.dark-theme .dropdown-menu>li>a{
	color: #fff;
}
.custom-navbar .dropdown-menu>li>a:hover, .custom-navbar .dropdown-menu>li>a:focus{
	/*background: #ededed;*/
	background: var(--green);
	color: #fff;
}
.custom-navbar .navbar-nav>li>.dropdown-menu{
	border: none;
    border-radius: 10px;
    margin-top: 10px;
}
/* OVERLAY NAVBAR */
#main-wrapper{
	position: absolute;
	top: 0;
    left: 50%;
    transform: translateX(-50%);
    z-index: 10;
}
div.tooltip {
 	/*
    width: 500px;
    height: 15px;
    padding: 8px;
    font: 10px sans-serif;
    background: lightgray;
    border: solid 1px #ccc;
    */
    position: absolute;
    text-align: center;
    border-radius: 10px;
    pointer-events: none;
    padding: 10px 20px;
    font: 14px sans-serif;
    background: #fff;
    border: solid 1px #ededed;
}
div.tooltip h3{
	margin: 10px 0; 
}  
.tooltip.custom-tooltip{
	position: absolute;
	bottom: 10px;
    left: 50%;
    transform: translateX(-50%);
    /*font-size: 1.5em;*/
    background: var(--dark);
    color: #fff;
    min-width: 250px;
}
.tooltip-attr-list{
	padding-inline-start: 20px;
    text-align: left;
    line-height: 1.5em;
}
#card-details{
    position: absolute;
    top: 2.5rem;
    left: 2.5rem;
    bottom: 2.5rem;
    max-width: 300px;
    width: 300px;
    padding: 3.5rem 2.5rem;
    background: #efefef;
    border-radius: 10px;
    overflow-y: scroll;
    overflow-x: hidden;
}
#card-details.dark-theme{
    background: var(--dark);
    color: #fff;
}
#card-details h1{
    font-size: 3rem;
}
#card-details h2{
    font-size: 2rem;
}
#card-details ul{
    margin: 0;
    margin-block-start: 0;
    margin-block-end: 0;
    padding-inline-start: 0;
    margin: 2rem 0px;
}
#card-details ul li{
    list-style: none;
    margin: 1rem 0;
}
#card-details ul.quality-properties li{
    margin-bottom: 4rem;
}
#card-details ul.quality-properties li .quality-label{
    padding: 5px 10px;
    background: var(--blue);
    border-radius: 5px;
    /* white-space: nowrap; */
    /* overflow: hidden; */
    /* text-overflow: ellipsis; */
    width: 80%;
    display: block;
}
.gauge g.arc {
    fill: steelblue;
}

.gauge g.pointer {
    /*fill: #e85116;
    stroke: #b64011;*/
    fill: var(--blue);
    stroke: var(--dark-2);
}

.gauge g.label text {
    text-anchor: middle;
    font-size: 14px;
    font-weight: bold;
    fill: #cdcdcd;
}
@media (max-width: 767px){
	#main-wrapper{
		width: 100%;
	}
	.custom-navbar .navbar-nav>li>.dropdown-menu{
		border-radius: 0;
		background: var(--dark-2);
	}
	.navbar-default .navbar-nav .open .dropdown-menu>li >a{
		color: #fefefe;
	}
	.navbar-default .navbar-nav .open .dropdown-menu>li:hover >a{
		color: #fff;
		background: var(--green)
	}
}
</style>
<body>
<div id="card-details" class="dark-theme box-shadow"></div>
<div class="jumbotron" id="repo"></div>

<script src="https://d3js.org/d3.v3.min.js"></script>
<script>
var gauge = function(container, configuration) {
    var that = {};
    var config = {
        size                        : 200,
        clipWidth                   : 200,
        clipHeight                  : 110,
        ringInset                   : 20,
        ringWidth                   : 20,
        
        pointerWidth                : 10,
        pointerTailLength           : 5,
        pointerHeadLengthPercent    : 0.9,
        
        minValue                    : 0,
        maxValue                    : 10,
        
        minAngle                    : -90,
        maxAngle                    : 90,
        
        transitionMs                : 750,
        labelTicks                  : 5,
        majorTicks                  : 5,
        labelFormat                 : d3.format(',g'),
        labelInset                  : 10,

        arcColorFn                  : d3.interpolateHsl(d3.rgb('#e8e2ca'), d3.rgb('#3e6c0a'))
    };
    var range = undefined;
    var r = undefined;
    var pointerHeadLength = undefined;
    var value = 0;
    
    var svg = undefined;
    var arc = undefined;
    var scale = undefined;
    var ticks = undefined;
    var tickData = undefined;
    var pointer = undefined;

    var donut = d3.layout.pie();
    
    function deg2rad(deg) {
        return deg * Math.PI / 180;
    }
    
    function newAngle(d) {
        var ratio = scale(d);
        var newAngle = config.minAngle + (ratio * range);
        return newAngle;
    }
    
    function configure(configuration) {
        var prop = undefined;
        for ( prop in configuration ) {
            config[prop] = configuration[prop];
        }
        
        range = config.maxAngle - config.minAngle;
        r = config.size / 2;
        pointerHeadLength = Math.round(r * config.pointerHeadLengthPercent);

        // a linear scale that maps domain values to a percent from 0..1
        scale = d3.scale.linear()
            .range([0,1])
            .domain([config.minValue, config.maxValue]);
            
        ticks = scale.ticks(config.labelTicks);
        tickData = d3.range(config.majorTicks).map(function() {return 1/config.majorTicks;});
        
        arc = d3.svg.arc()
            .innerRadius(r - config.ringWidth - config.ringInset)
            .outerRadius(r - config.ringInset)
            .startAngle(function(d, i) {
                var ratio = d * i;
                return deg2rad(config.minAngle + (ratio * range));
            })
            .endAngle(function(d, i) {
                var ratio = d * (i+1);
                return deg2rad(config.minAngle + (ratio * range));
            });
    }
    that.configure = configure;
    
    function centerTranslation() {
        return 'translate('+r +','+ r +')';
    }
    
    function isRendered() {
        return (svg !== undefined);
    }
    that.isRendered = isRendered;
    
    function render(newValue) {
        svg = d3.select(container)
            .append('svg:svg')
                .attr('class', 'gauge')
                .attr('width', config.clipWidth)
                .attr('height', config.clipHeight);
        
        var centerTx = centerTranslation();
        
        var arcs = svg.append('g')
                .attr('class', 'arc')
                .attr('transform', centerTx);
        
        arcs.selectAll('path')
                .data(tickData)
            .enter().append('path')
                .attr('fill', function(d, i) {
                    return config.arcColorFn(d * i);
                })
                .attr('stroke', function(d, i) {
                    return config.arcColorFn(d * i);
                })
                .attr('d', arc); 
        
        
        var lg = svg.append('g')
                .attr('class', 'label')
                .attr('transform', centerTx);
        lg.selectAll('text')
                .data(ticks)
            .enter().append('text')
                .attr('transform', function(d) {
                    var ratio = scale(d);
                    var newAngle = config.minAngle + (ratio * range);
                    return 'rotate(' +newAngle +') translate(0,' +(config.labelInset - r) +')';
                })
                .text(config.labelFormat);

        var lineData = [ [config.pointerWidth / 2, 0], 
                        [0, -pointerHeadLength],
                        [-(config.pointerWidth / 2), 0],
                        [0, config.pointerTailLength],
                        [config.pointerWidth / 2, 0] ];
        var pointerLine = d3.svg.line().interpolate('monotone');
        var pg = svg.append('g').data([lineData])
                .attr('class', 'pointer')
                .attr('transform', centerTx);
                
        pointer = pg.append('path')
            .attr('d', pointerLine/*function(d) { return pointerLine(d) +'Z';}*/ )
            .attr('transform', 'rotate(' +config.minAngle +')');
            
        update(newValue === undefined ? 0 : newValue);
    }
    that.render = render;
    
    function update(newValue, newConfiguration) {
        if ( newConfiguration  !== undefined) {
            configure(newConfiguration);
        }
        var ratio = scale(newValue);
        var newAngle = config.minAngle + (ratio * range);
        pointer.transition()
            .duration(config.transitionMs)
            .ease('elastic')
            .attr('transform', 'rotate(' +newAngle +')');
    }
    that.update = update;

    configure(configuration);
    
    return that;
};


var links = [
[%for (edge in edges) { 
if(edge.src.isDefined() and edge.trg.isDefined()){
%]
  {source: "[%=edge.src.name%]", target: "[%=edge.trg.name%]", type: "unidirectional", relationtype: "[%=edge.eClass.name%]", value: "[%=(edge.eClass.name='Distance')?edge.value:''%]"},
  [%
 	}}
  %]
];

var subject = "[%=subject.name%]";   
var nodes = {
[%for (node in nodes) { %]
	"[%=node.name%]" : {"name":"[%=node.name%]","type":"[%=node.eClass.name%]","info":"[%=node.name%]","virtual":"[%=(node.virtual)?"virtual":"concrete"%]" 
	[% if(evals.size()>0){ %]
	,
	quality: {[% for(e in evals.select(ev|emfTool.EcoreUtil.equals(node, ev.subject))){ %]
	 "[%=e.qa.name%]":"[%=e.actualizedvalue%]",
	 [%}%]}
	[%}%]	 
	},
[%}%]

 };

try{
const container = document.getElementById("main-wrapper"), repo = document.getElementById("repo"), card = document.getElementById("card-details")

const vw_offset = card.clientWidth + 50;

const MIN_LINK_DISTANCE = 200,
	  MIN_NODE_SIZE = 5, MAX_NODE_SIZE = 30, MAX_SCALE = 3;

const width = window.innerWidth, // container.clientWidth - (parseFloat(getComputedStyle(container).paddingLeft) * 2),
	height = window.innerHeight // - repo.offsetTop;

const backgroundNodeLabel = "#efefef";

let ACTIVELAYER = "A::A", checkClick = false;
let [TYPE_PROPERTY, SIZE_PROPERTY] = ACTIVELAYER.split("::")

let MAX_VALUE, MIN_VALUE;

const getMaxMinValuesFromNodes = (nodes) => {
	//default values
	const default_values = [0, 100]
	let parse_nodes;
  	//can be used either nodes object or force.nodes() array
  	Array.isArray(nodes) ?  parse_nodes = nodes : parse_nodes = Object.values(nodes)

	const filter_array = parse_nodes.filter(item => item.type == TYPE_PROPERTY ? +item.quality[SIZE_PROPERTY] : null).map(i => parseFloat(i.quality[SIZE_PROPERTY]))
	
	//check if there are enough objects with valid SIZE_PROPERTY values
	if(filter_array < 2) return default_values

	const sorted_array = filter_array.sort((prev, current) => prev - current)
	const min = sorted_array[0], max = sorted_array[sorted_array.length-1]

	return (min + max) ? [min, max] : default_values
}

//get integer number between
const getRelativeValue = (n, round) => round ? Math.round((n*MAX_NODE_SIZE)/MAX_VALUE) : (n*MAX_NODE_SIZE)/MAX_VALUE

//get a valid numeric value from SIZE_PROPERTY property 
const getNodeSize = d => {	
	const value = d.quality[SIZE_PROPERTY], type = d.type;

	//check type, if it's not TYPE_PROPERTY return default size
	if(type !== TYPE_PROPERTY){
		return MIN_NODE_SIZE
	}
	
	//type is ok, then node's size depends on d..quality.SIZE_PROPERTY's value

	//check if value is a number, null or undefined
	const num = +value ? +value : 0;
	
	//get relative value
	const rel = getRelativeValue(num)

	return rel + MIN_NODE_SIZE
}

//set distance for each edge, adding an offset based on nodes' size
const linkDistanceByNodeSize = d => {
	let offset = 0;

	//get source node offset
	const source_offset = getNodeSize(d.source)
	if(source_offset > MIN_NODE_SIZE) offset += source_offset

	//get target node offset
	const target_offset = getNodeSize(d.target)
	if(target_offset > MIN_NODE_SIZE) offset += target_offset

	return offset + MIN_LINK_DISTANCE
}

//init min and max values
[MIN_VALUE, MAX_VALUE] = getMaxMinValuesFromNodes(nodes)

links.forEach(function(link) {
    link.source = nodes[link.source] || 
        (nodes[link.source] = {name: link.source});
    link.target = nodes[link.target] || 
        (nodes[link.target] = {name: link.target});
    link.value = +link.value;
});



var force = d3.layout.force()
    .nodes(d3.values(nodes))
    .links(links)
    .size([width+vw_offset, height])
    //.linkDistance(60)
    .linkDistance(linkDistanceByNodeSize)
    .charge(-700)
    //.charge(-300)
    .on("tick", tick)
    .start();

var zoom = d3.behavior.zoom().on("zoom", function (e) {
		svg.attr("transform", "translate(" + d3.event.translate + ")" + " scale(" +  d3.event.scale  + ")")
    }).scaleExtent([0.3, MAX_SCALE]).on("zoomend", zoomend)

/*var svg = d3.select("div#repo").append("svg")
    .attr("width", width)
    .attr("height", height);*/
var svg = d3.select("div#repo").append("svg")
	.attr("width", "100%")
	.attr("height", "100%")
	.call(zoom)
    .append("g")
    
function zoomend(e){
	const box = this.getBBox();
	let translated = zoom.translate()

	if(box.width < window.innerWidth) {
		//when box is smaller than viewport check its own width to limit panning
		if(box.x < (vw_offset-(box.width/2))) translated[0] += (vw_offset-(box.width/2)) - box.x
		else if(box.x > (window.innerWidth-(box.width/2))) translated[0] -= box.x-(window.innerWidth-(box.width/2));
	}else{
		//when box is bigger than viewport check the center of viewport to limit panning
		if(box.x > (window.innerWidth/2)) translated[0] -= box.x - (window.innerWidth/2)
		else if(box.x+box.width < (vw_offset+window.innerWidth/2)) translated[0] += (window.innerWidth/2) - (box.x+box.width);
	}

	if(box.height < window.innerHeight) {
		//when box is smaller than viewport check its own height to limit panning
		if(box.y < (-box.height/2)) translated[1] += (-box.height/2) - box.y
		else if(box.y > (window.innerHeight-(box.height/2))) translated[1] -= box.y-(window.innerHeight-(box.height/2));
	}else{
		//when box is bigger than viewport check the center of viewport to limit panning
		if(box.y > (window.innerHeight/2)) translated[1] -= box.y - (window.innerHeight/2)
		else if(box.y+box.height < (window.innerHeight/2)) translated[1] += (window.innerWidth/2) - (box.y+box.height)
	}
	zoom.translate(translated)
	svg.transition().duration(300).attr("transform", "translate(" + translated + ")" + " scale(" +  zoom.scale()  + ")")
		
}
// build the arrow.
svg.append("svg:defs").selectAll("marker")
    .data(["end"])      // Different link/path types can be defined here
  .enter().append("svg:marker")    // This section adds in the arrows
    .attr("id", String)
    .attr("viewBox", "0 -5 10 10")
    //.attr("refX", 15)
    //.attr("refY", -1.5) 
    .attr("refX", 0)
    .attr("refY", 0)
    .attr("markerWidth", 6)
    .attr("markerHeight", 6)
    .attr("orient", "auto")
  .append("svg:path")
    .attr("d", "M0,-5L10,0L0,5");

// add the links and the arrows
var path = svg.append("svg:g").selectAll("path")
    .data(force.links())
  .enter().append("svg:path")
    .attr("class", function(d) { return "link " + d.relationtype; })
    //.attr("class", "link")
     .attr("id", (d, i) => d.relationtype === "Distance" ? "path_" + d.source.name + "_" + d.target.name : null)
  	//.style("stroke-dasharray", ("3, 3"))
 	.attr("marker-end", link => link.type === "unidirectional" ? "url(#end)" : 0)
 ;

//TEXTPATH
const labelpath = svg.append("g").selectAll("text")
	.data(links.filter(d => d.relationtype === "Distance"))
	.enter().append("g")
	.attr("class", "path-label")
const textpath = labelpath
	.append("text")
	.attr("class", "link-label")
	.append("textPath")
	.attr("xlink:href", (d,i) => "#path_" + d.source.name + "_" + d.target.name)
	.attr("text-anchor", "middle")
	.attr("startOffset", "50%")
	.text(d => d.value)
 

// define the nodes
var node = svg.selectAll(".node")
    .data(force.nodes())
  .enter().append("g")
    //.attr("class", "node")
    .attr("class", function(d) { return "node " + d.type; })
    .call(force.drag);

node.on("mouseenter", mouseover)
	//.on("mouseout", mouseout)
	//.on("mouseover", mouseover)
	.on("mouseleave", mouseout)
	.on("mousedown", mousedown)
	.on("mouseup", mouseup);

// add the nodes
node.append("circle")
 .attr("class", function(d) { return  d.virtual; })
    //.attr("r", 5)
    .attr("r", d => {
    	const radius = getNodeSize(d);
    	d.radius = radius;
    	return radius;
    });
 ;

// add the text 
const nodeLabel = node.append("text")
    // .attr("x", 12)
    .attr("x", d => d.radius + 7)
    .attr("dy", ".35em")
    .text(function(d) { return d.name; })
    .attr("class", d => "node-label")
    .call(getTextBox);

//add background text
const bgNodeLabel = node.insert("rect", "text")
    .attr("rx", 10)
    .attr("class", "node-label-bg")
    //.style("fill", "#efefef")
    .attr("x", d => d.bbox.x - 2.5) 
    .attr("y", d => -d.bbox.height)
    //.attr("width", d => {debugger})
    .attr("width", d => d.bbox.width + 10)
    .attr("height", d => d.bbox.height*2)
	;

function getTextBox(selection){
    selection.each(function(d) { d.bbox = this.getBBox(); })
}

d3.selection.prototype.moveToFront = function() {  
	return this.each(function(){
		this.parentNode.appendChild(this);
	});
};

// add the curvy lines
function tick() {
    path.attr("d", function(d) {
        var dx = d.target.x - d.source.x,
            dy = d.target.y - d.source.y,
            dr = Math.sqrt(dx * dx + dy * dy);
        return "M" + 
            d.source.x + "," + 
            d.source.y + "A" + 
            dr + "," + dr + " 0 0,1 " + 
            d.target.x + "," + 
            d.target.y;
    });

    node
        .attr("transform", function(d) { 
  	    return "translate(" + d.x + "," + d.y + ")"; })

    // set distance based on node's radius
	path.attr("d", function (d, i) {
		// length of current path
	    const pl = this.getTotalLength();

	    //calculate radius of target node, including the arrow/marker's size 
	    //const r = getNodeSize(d.target) + Math.sqrt(6**2 + 6**2);
	    const r = d.target.radius + Math.sqrt(6**2 + 6**2);
	    //get the point on the the target node's circumference
	    const m = this.getPointAtLength(pl - r);
	    var dx = d.target.x - d.source.x ,
            dy = d.target.y - d.source.y,
            dr = Math.sqrt(dx * dx + dy * dy);

	    var result = "M" + d.source.x + "," + d.source.y + "A" + dr + "," + dr + " 0 0,1 " + m.x + "," + m.y;

	    return result;
	});
}

var div = d3.select("body").append("div")
        .attr("class", "tooltip custom-tooltip box-shadow")
        .style("opacity", 0);

function mousedown(d) {
	d3.event.stopPropagation();
	checkClick = true;
}

function mouseup(d) {
	checkClick = false;
}

function mouseover(d) {
	//ignore if node is clicked
	if(checkClick){
		return
	}

	const curr_node = d3.select(this)
	//here you can check if node is already in front
	//if it's not, bring node to front
	curr_node.moveToFront()

	curr_node.select("circle").transition()
      .duration(500)
      //.attr("r", 16);
      .attr("r", d => d.radius * 1.3);

	//HIGHLIGHT LABEL
	curr_node.select("text").attr("fill", "#fff")
	curr_node.select("rect").style("fill", "#6EE7B7")
	
	div.transition()
        .duration(300)
        .style("opacity", 1);

	//const attrs = getAttributesList(d)
   	div.html(`<h3>${d.info}</h3>
   		<ul class="tooltip-attr-list">
   		${getAttributesList(d.quality)}
   		</ul>`)
        //.style("left", (d3.event.pageX ) + "px")
        //.style("top", (d3.event.pageY + 100) + "px");
        .style("opacity", 1)
	
}
function getAttributesList(list){
	let html = ""
	for(const attr in list){
		html += `<li>
				<strong>${attr}</strong>: ${list[attr]}
			</li>`	
	}
	return html
}
function mouseout(d) {

	//ignore if node is clicked
	if(checkClick){
		return
	}

	const curr_node = d3.select(this);

  	curr_node.select("circle").transition()
      .duration(500)
      //.attr("r", 8);
      .attr("r", d => d.radius);
	
	//UNHIGHLIGHT LABEL
	curr_node.select("text").attr("fill", "#333")
	curr_node.select("rect").style("fill", backgroundNodeLabel)

	div.transition()
                .duration(300)
                .style("opacity", 1e-6);
	
}

document.querySelectorAll(".select-activelayer")
.forEach(item => item.addEventListener("click", e => {
	e.preventDefault()
	ACTIVELAYER = e.currentTarget.dataset.layerid;
	const properties = ACTIVELAYER.split("::")
	TYPE_PROPERTY = properties[0]; SIZE_PROPERTY = properties[1];

	//set min and max values by selected properties
	[MIN_VALUE, MAX_VALUE] = getMaxMinValuesFromNodes(nodes)

	force.stop();
	
	node.selectAll("circle").transition().duration(500)
	.attr("r", d => {
    	const radius = getNodeSize(d);
    	d.radius = radius;
    	return radius;
    });
	node.selectAll("text").attr("x", d => d.radius + 7).call(getTextBox)
	node.selectAll("rect")
		.attr("x", d => d.bbox.x - 2.5) 
	    .attr("y", d => -d.bbox.height)
	    .attr("width", d => d.bbox.width + 10)
	    .attr("height", d => d.bbox.height*2)

	force.start();
}))
/* RESPONSIVE 
function updateWindow(){
	debugger;
    x = .innerWidth || e.clientWidth || g.clientWidth;
    y = w.innerHeight|| e.clientHeight|| g.clientHeight;

    svg.attr("width", x).attr("height", y);
}*/
/*var ro = new ResizeObserver( entries => {
	const cr = entries[0].contentRect;
	force.stop();
	force.size([cr.width + vw_offset, cr.height])
	force.start();
	//svg.attr("width", cr.width).attr("height", cr.height);
});
ro.observe(document.body);*/
//document.body.addEventListener('resize', updateWindow);


//SUBJECT
const card_template = (node) => {
    //create gauge
    const {name, quality, type, info, virtual} = node;
    const quality_list = Object.keys(quality).flatMap(i => `<li><div id="gauge_${i}"></div><span class=""><strong>${i}</strong>: ${node.quality[i]}</span></li>`).join("");
  return `
    <h1>${name}</h1>
    <hr>
    <ul>
        <li>
            <strong>info</strong>: ${info}
        </li>
        <li>
            <strong>type</strong>: ${type}
        </li>
        <li>
            <strong>virtual</strong>: ${virtual}
        </li>
    </ul>
    <h2>Quality Properties</h2>
    <ul class="quality-properties">
        ${quality_list}
    </ul>
  `
}

const detail_object = nodes[subject]

const MAX_QUALITY_ATT = {
[%for (attr in MAX_QUALITY_ATT) { %]
	"[%=attr.get("qa")%]":"[%=attr.get("maxvalue")%]",
[%}%]
	 
}

//check if subject has been found
if(detail_object){
    card.innerHTML = card_template(detail_object)
    //create gauge
    const size_cont = card.clientWidth - (getComputedStyle(card).paddingLeft.slice(0, -2)*2) - 50
    for (const i in detail_object.quality){
        const powerGauge = gauge('#gauge_'+i, {
            size: size_cont,
            clipWidth: size_cont,
            clipHeight: 120,
            ringWidth: 20,
            maxValue: MAX_QUALITY_ATT[i] ? MAX_QUALITY_ATT[i] : 100,


            //minAngle: -170,
            //maxAngle: 100,
            //clipHeight: 250,

            pointerWidth: 8,
            pointerTailLength: 5,
            pointerHeadLengthPercent: 0.7, //0.9

            //majorTicks: 190,
            majorTicks: 20,
            labelTicks: 5,
            transitionMs: 4000,
            arcColorFn: d3.interpolateHsl(d3.rgb('#EF4444'), d3.rgb('#10B981')),
            startColor: "#EF4444",
            endColor: "#6EE7B7",
            gradient: true,
            //arcColorFn: d3.interpolateHsl(d3.rgb('#ff0000'), d3.rgb('#00ff00'))
        });
        powerGauge.render(parseFloat(detail_object.quality[i]));
    }
    
}else{
    card.innerHTML = `<h1>Subject Not Found</h1><p>Check nodes list and refresh the page.</p>`
}
}catch(e){ document.body.innerHTML = e }
</script>
</body>
</html>
[%
operation isLayerActive(id : String) {
    var layer = layers.selectOne(l|l.id = id);
    if (layer.isDefined()) {
        return layer.active;
    }
    else {
        return true;
    }
}
%]